<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memory isolation on Anjo Vahldiek-Oberwagner</title>
    <link>https://vahldiek.github.io/tags/memory-isolation/</link>
    <description>Recent content in memory isolation on Anjo Vahldiek-Oberwagner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Fri, 11 Nov 2022 00:24:42 +0100</lastBuildDate>
    
	<atom:link href="https://vahldiek.github.io/tags/memory-isolation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Memory-Safe Hardware and Software Architecture</title>
      <link>https://vahldiek.github.io/project/meshwa/</link>
      <pubDate>Fri, 11 Nov 2022 00:24:42 +0100</pubDate>
      
      <guid>https://vahldiek.github.io/project/meshwa/</guid>
      <description>Motivated by developer productivity, serverless computing, and microservices have become the de facto development model in the cloud. Microservices decompose monolithic applications into separate functional units deployed individually. This deployment model, however, costs CSPs a large infrastructure tax of more than 25%.
To overcome this architectural limitation, we hypothesize a Memory-Safe Software and Hardware Architecture providing a general-purpose runtime environment to specialize functionality when needed and strongly isolate components.</description>
    </item>
    
    <item>
      <title>Secure In-Process Memory Isolation and Efficient Cloud Deployments</title>
      <link>https://vahldiek.github.io/project/erim/</link>
      <pubDate>Sat, 15 Dec 2018 00:24:42 +0100</pubDate>
      
      <guid>https://vahldiek.github.io/project/erim/</guid>
      <description>Isolating sensitive data and state can increase the security and robustness of many applications. Applications, such as isolating cryptographic session keys in a network-facing application or isolating frequently invoked native libraries in managed runtimes, require very frequent domain switching. In such applications, the overhead of kernel- or hypervisormediated domain switching is prohibitive. We suggest LwCs and ERIM to overcome these costs using novel kernel functionality and hardware-support (e.g., Intel MPK), respectively.</description>
    </item>
    
  </channel>
</rss>